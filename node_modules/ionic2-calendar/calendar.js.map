{"version":3,"file":"calendar.js","sourceRoot":"","sources":["../src/calendar.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output, TemplateRef, Inject, LOCALE_ID } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { CalendarService } from './calendar.service';\n\nexport interface IEvent {\n    allDay: boolean;\n    endTime: Date;\n    startTime: Date;\n    title: string;\n}\n\nexport interface IRange {\n    startTime: Date;\n    endTime: Date;\n}\n\nexport interface IView {\n}\n\nexport interface IDayView extends IView {\n    allDayEvents: IDisplayAllDayEvent[];\n    rows: IDayViewRow[];\n}\n\nexport interface IDayViewRow {\n    events: IDisplayEvent[];\n    time: Date;\n}\n\nexport interface IMonthView extends IView {\n    dates: IMonthViewRow[];\n    dayHeaders: string[];\n}\n\nexport interface IMonthViewRow {\n    current?: boolean;\n    date: Date;\n    events: IEvent[];\n    hasEvent?: boolean;\n    label: string;\n    secondary: boolean;\n    selected?: boolean;\n    disabled: boolean;\n}\n\nexport interface IWeekView extends IView {\n    dates: IWeekViewDateRow[];\n    rows: IWeekViewRow[][];\n    dayHeaders: string[];\n}\n\nexport interface IWeekViewDateRow {\n    date: Date;\n    events: IDisplayEvent[];\n}\n\nexport interface IWeekViewRow {\n    events: IDisplayEvent[];\n    time: Date;\n}\n\nexport interface IDisplayEvent {\n    endIndex: number;\n    endOffset?: number;\n    event: IEvent;\n    startIndex: number;\n    startOffset?: number;\n    overlapNumber?: number;\n    position?: number;\n}\n\nexport interface IDisplayAllDayEvent {\n    event: IEvent;\n}\n\nexport interface ICalendarComponent {\n    currentViewIndex: number;\n    direction: number;\n    eventSource: IEvent[];\n    getRange: { (date:Date): IRange; };\n    getViewData: { (date:Date): IView };\n    mode: CalendarMode;\n    range: IRange;\n    views: IView[];\n    onDataLoaded: { (): void };\n    onRangeChanged: EventEmitter<IRange>;\n}\n\nexport interface ITimeSelected {\n    events: IEvent[];\n    selectedTime: Date;\n    disabled: boolean;\n}\n\nexport interface IMonthViewDisplayEventTemplateContext {\n    view: IView,\n    row: number,\n    col: number\n}\n\nexport interface IMonthViewEventDetailTemplateContext {\n    selectedDate: ITimeSelected,\n    noEventsLabel: string\n}\n\nexport interface IWeekViewAllDayEventSectionTemplateContext {\n    day: IWeekViewDateRow,\n    eventTemplate: TemplateRef<IDisplayAllDayEvent>\n}\n\nexport interface IWeekViewNormalEventSectionTemplateContext {\n    tm: IWeekViewRow,\n    eventTemplate: TemplateRef<IDisplayEvent>\n}\n\nexport interface IDayViewAllDayEventSectionTemplateContext {\n    alldayEvents: IDisplayAllDayEvent[],\n    eventTemplate: TemplateRef<IDisplayAllDayEvent>\n}\n\nexport interface IDayViewNormalEventSectionTemplateContext {\n    tm: IDayViewRow,\n    eventTemplate: TemplateRef<IDisplayEvent>\n}\n\nexport interface IDateFormatter {\n    formatMonthViewDay?: { (date:Date): string; };\n    formatMonthViewDayHeader?: { (date:Date): string; };\n    formatMonthViewTitle?: { (date:Date): string; };\n    formatWeekViewDayHeader?: { (date:Date): string; };\n    formatWeekViewTitle?: { (date:Date): string; };\n    formatWeekViewHourColumn?: { (date:Date): string; };\n    formatDayViewTitle?: { (date:Date): string; };\n    formatDayViewHourColumn?: { (date:Date): string; };\n}\n\nexport type CalendarMode = 'day' | 'month' | 'week';\n\nexport type QueryMode = 'local' | 'remote';\n\nexport enum Step {\n    QuarterHour = 15,\n    HalfHour = 30,\n    Hour = 60\n}\n\n@Component({\n    selector: 'calendar',\n    template: `\n        <ng-template #monthviewDefaultDisplayEventTemplate let-view=\"view\" let-row=\"row\" let-col=\"col\">\n            {{view.dates[row*7+col].label}}\n        </ng-template>\n        <ng-template #monthviewDefaultEventDetailTemplate let-showEventDetail=\"showEventDetail\" let-selectedDate=\"selectedDate\" let-noEventsLabel=\"noEventsLabel\">\n            <ion-list class=\"event-detail-container\" has-bouncing=\"false\" *ngIf=\"showEventDetail\" overflow-scroll=\"false\">\n                <ion-item *ngFor=\"let event of selectedDate?.events\" (click)=\"eventSelected(event)\">\n                        <span *ngIf=\"!event.allDay\" class=\"monthview-eventdetail-timecolumn\">{{event.startTime|date: 'HH:mm'}}\n                            -\n                            {{event.endTime|date: 'HH:mm'}}\n                        </span>\n                    <span *ngIf=\"event.allDay\" class=\"monthview-eventdetail-timecolumn\">{{allDayLabel}}</span>\n                    <span class=\"event-detail\">  |  {{event.title}}</span>\n                </ion-item>\n                <ion-item *ngIf=\"selectedDate?.events.length==0\">\n                    <div class=\"no-events-label\">{{noEventsLabel}}</div>\n                </ion-item>\n            </ion-list>\n        </ng-template>\n        <ng-template #defaultAllDayEventTemplate let-displayEvent=\"displayEvent\">\n            <div class=\"calendar-event-inner\">{{displayEvent.event.title}}</div>\n        </ng-template>\n        <ng-template #defaultNormalEventTemplate let-displayEvent=\"displayEvent\">\n            <div class=\"calendar-event-inner\">{{displayEvent.event.title}}</div>\n        </ng-template>\n        <ng-template #defaultWeekViewAllDayEventSectionTemplate let-day=\"day\" let-eventTemplate=\"eventTemplate\">\n            <div [ngClass]=\"{'calendar-event-wrap': day.events}\" *ngIf=\"day.events\"\n                 [ngStyle]=\"{height: 25*day.events.length+'px'}\">\n                <div *ngFor=\"let displayEvent of day.events\" class=\"calendar-event\" tappable\n                     (click)=\"eventSelected(displayEvent.event)\"\n                     [ngStyle]=\"{top: 25*displayEvent.position+'px', width: 100*(displayEvent.endIndex-displayEvent.startIndex)+'%', height: '25px'}\">\n                    <ng-template [ngTemplateOutlet]=\"eventTemplate\"\n                                 [ngTemplateOutletContext]=\"{displayEvent:displayEvent}\">\n                    </ng-template>\n                </div>\n            </div>\n        </ng-template>\n        <ng-template #defaultDayViewAllDayEventSectionTemplate let-allDayEvents=\"allDayEvents\" let-eventTemplate=\"eventTemplate\">\n            <div *ngFor=\"let displayEvent of allDayEvents; let eventIndex=index\"\n                 class=\"calendar-event\" tappable\n                 (click)=\"eventSelected(displayEvent.event)\"\n                 [ngStyle]=\"{top: 25*eventIndex+'px',width: '100%',height:'25px'}\">\n                <ng-template [ngTemplateOutlet]=\"eventTemplate\"\n                             [ngTemplateOutletContext]=\"{displayEvent:displayEvent}\">\n                </ng-template>\n            </div>\n        </ng-template>\n        <ng-template #defaultNormalEventSectionTemplate let-tm=\"tm\" let-hourParts=\"hourParts\" let-eventTemplate=\"eventTemplate\">\n            <div [ngClass]=\"{'calendar-event-wrap': tm.events}\" *ngIf=\"tm.events\">\n                <div *ngFor=\"let displayEvent of tm.events\" class=\"calendar-event\" tappable\n                     (click)=\"eventSelected(displayEvent.event)\"\n                     [ngStyle]=\"{top: (37*displayEvent.startOffset/hourParts)+'px',left: 100/displayEvent.overlapNumber*displayEvent.position+'%', width: 100/displayEvent.overlapNumber+'%', height: 37*(displayEvent.endIndex -displayEvent.startIndex - (displayEvent.endOffset + displayEvent.startOffset)/hourParts)+'px'}\">\n                    <ng-template [ngTemplateOutlet]=\"eventTemplate\"\n                                 [ngTemplateOutletContext]=\"{displayEvent:displayEvent}\">\n                    </ng-template>\n                </div>\n            </div>\n        </ng-template>\n\n        <div [ngSwitch]=\"calendarMode\" class=\"{{calendarMode}}view-container\">\n            <monthview *ngSwitchCase=\"'month'\"\n                [formatDay]=\"formatDay\"\n                [formatDayHeader]=\"formatDayHeader\"\n                [formatMonthTitle]=\"formatMonthTitle\"\n                [startingDayMonth]=\"startingDayMonth\"\n                [showEventDetail]=\"showEventDetail\"\n                [noEventsLabel]=\"noEventsLabel\"\n                [autoSelect]=\"autoSelect\"\n                [eventSource]=\"eventSource\"\n                [markDisabled]=\"markDisabled\"\n                [monthviewDisplayEventTemplate]=\"monthviewDisplayEventTemplate||monthviewDefaultDisplayEventTemplate\"\n                [monthviewInactiveDisplayEventTemplate]=\"monthviewInactiveDisplayEventTemplate||monthviewDefaultDisplayEventTemplate\"\n                [monthviewEventDetailTemplate]=\"monthviewEventDetailTemplate||monthviewDefaultEventDetailTemplate\"\n                [locale]=\"locale\"\n                [dateFormatter]=\"dateFormatter\"\n                [dir]=\"dir\"\n                [lockSwipeToPrev]=\"lockSwipeToPrev\"\n                [lockSwipes]=\"lockSwipes\"\n                [spaceBetween]=\"spaceBetween\"       \n                (onRangeChanged)=\"rangeChanged($event)\"\n                (onEventSelected)=\"eventSelected($event)\"\n                (onTimeSelected)=\"timeSelected($event)\"\n                (onTitleChanged)=\"titleChanged($event)\">\n            </monthview>\n            <weekview *ngSwitchCase=\"'week'\"\n                [formatWeekTitle]=\"formatWeekTitle\"\n                [formatWeekViewDayHeader]=\"formatWeekViewDayHeader\"\n                [formatHourColumn]=\"formatHourColumn\"\n                [startingDayWeek]=\"startingDayWeek\"\n                [allDayLabel]=\"allDayLabel\"\n                [hourParts]=\"hourParts\"\n                [hourSegments]=\"hourSegments\"\n                [eventSource]=\"eventSource\"\n                [markDisabled]=\"markDisabled\"\n                [weekviewAllDayEventTemplate]=\"weekviewAllDayEventTemplate||defaultAllDayEventTemplate\"\n                [weekviewNormalEventTemplate]=\"weekviewNormalEventTemplate||defaultNormalEventTemplate\"\n                [weekviewAllDayEventSectionTemplate]=\"weekviewAllDayEventSectionTemplate||defaultWeekViewAllDayEventSectionTemplate\"\n                [weekviewNormalEventSectionTemplate]=\"weekviewNormalEventSectionTemplate||defaultNormalEventSectionTemplate\"\n                [locale]=\"locale\"\n                [dateFormatter]=\"dateFormatter\"\n                [dir]=\"dir\"\n                [scrollToHour]=\"scrollToHour\"\n                [preserveScrollPosition]=\"preserveScrollPosition\"\n                [lockSwipeToPrev]=\"lockSwipeToPrev\"\n                [lockSwipes]=\"lockSwipes\"\n                [startHour]=\"startHour\"\n                [endHour]=\"endHour\"\n                [spaceBetween]=\"spaceBetween\"\n                (onRangeChanged)=\"rangeChanged($event)\"\n                (onEventSelected)=\"eventSelected($event)\"\n                (onTimeSelected)=\"timeSelected($event)\"\n                (onTitleChanged)=\"titleChanged($event)\">\n            </weekview>\n            <dayview *ngSwitchCase=\"'day'\"\n                [formatDayTitle]=\"formatDayTitle\"\n                [formatHourColumn]=\"formatHourColumn\"\n                [allDayLabel]=\"allDayLabel\"\n                [hourParts]=\"hourParts\"\n                [hourSegments]=\"hourSegments\"\n                [eventSource]=\"eventSource\"\n                [markDisabled]=\"markDisabled\"\n                [dayviewAllDayEventTemplate]=\"dayviewAllDayEventTemplate||defaultAllDayEventTemplate\"\n                [dayviewNormalEventTemplate]=\"dayviewNormalEventTemplate||defaultNormalEventTemplate\"\n                [dayviewAllDayEventSectionTemplate]=\"dayviewAllDayEventSectionTemplate||defaultDayViewAllDayEventSectionTemplate\" \n                [dayviewNormalEventSectionTemplate]=\"dayviewNormalEventSectionTemplate||defaultNormalEventSectionTemplate\"\n                [locale]=\"locale\"\n                [dateFormatter]=\"dateFormatter\"\n                [dir]=\"dir\"\n                [scrollToHour]=\"scrollToHour\"\n                [preserveScrollPosition]=\"preserveScrollPosition\"\n                [lockSwipeToPrev]=\"lockSwipeToPrev\"\n                [lockSwipes]=\"lockSwipes\"\n                [startHour]=\"startHour\"\n                [endHour]=\"endHour\"\n                [spaceBetween]=\"spaceBetween\"\n                (onRangeChanged)=\"rangeChanged($event)\"\n                (onEventSelected)=\"eventSelected($event)\"\n                (onTimeSelected)=\"timeSelected($event)\"\n                (onTitleChanged)=\"titleChanged($event)\">\n            </dayview>\n        </div>\n    `,\n    styles: [`\n        :host > div { height: 100%; }\n\n        .event-detail-container {\n          border-top: 2px darkgrey solid;\n        }\n\n        .no-events-label {\n          font-weight: bold;\n          color: darkgrey;\n          text-align: center;\n        }\n\n        .event-detail {\n          cursor: pointer;\n          white-space: nowrap;\n          text-overflow: ellipsis;\n        }\n\n        .monthview-eventdetail-timecolumn {\n          width: 110px;\n          overflow: hidden;\n        }\n\n        .calendar-event-inner {\n          overflow: hidden;\n          background-color: #3a87ad;\n          color: white;\n          height: 100%;\n          width: 100%;\n          padding: 2px;\n          line-height: 15px;\n        }\n\n        @media (max-width: 750px) {\n          .calendar-event-inner {\n            font-size: 12px;\n          }\n        }\n    `],\n    providers: [CalendarService]\n})\nexport class CalendarComponent implements OnInit {\n    @Input()\n    get currentDate():Date {\n        return this._currentDate;\n    }\n\n    set currentDate(val:Date) {\n        if (!val) {\n            val = new Date();\n        }\n\n        this._currentDate = val;\n        this.calendarService.setCurrentDate(val, true);\n        this.onCurrentDateChanged.emit(this._currentDate);\n    }\n\n    @Input() eventSource:IEvent[] = [];\n    @Input() calendarMode:CalendarMode = 'month';\n    @Input() formatDay:string = 'd';\n    @Input() formatDayHeader:string = 'EEE';\n    @Input() formatDayTitle:string = 'MMMM dd, yyyy';\n    @Input() formatWeekTitle:string = 'MMMM yyyy, \\'Week\\' w';\n    @Input() formatMonthTitle:string = 'MMMM yyyy';\n    @Input() formatWeekViewDayHeader:string = 'EEE d';\n    @Input() formatHourColumn:string = 'ha';\n    @Input() showEventDetail:boolean = true;\n    @Input() startingDayMonth:number = 0;\n    @Input() startingDayWeek:number = 0;\n    @Input() allDayLabel:string = 'all day';\n    @Input() noEventsLabel:string = 'No Events';\n    @Input() queryMode:QueryMode = 'local';\n    @Input() step:Step = Step.Hour;\n    @Input() timeInterval:number = 60;\n    @Input() autoSelect:boolean = true;\n    @Input() markDisabled:(date:Date) => boolean;\n    @Input() monthviewDisplayEventTemplate:TemplateRef<IMonthViewDisplayEventTemplateContext>;\n    @Input() monthviewInactiveDisplayEventTemplate:TemplateRef<IMonthViewDisplayEventTemplateContext>;\n    @Input() monthviewEventDetailTemplate:TemplateRef<IMonthViewEventDetailTemplateContext>;\n    @Input() weekviewAllDayEventTemplate:TemplateRef<IDisplayAllDayEvent>;\n    @Input() weekviewNormalEventTemplate:TemplateRef<IDisplayEvent>;\n    @Input() dayviewAllDayEventTemplate:TemplateRef<IDisplayAllDayEvent>;\n    @Input() dayviewNormalEventTemplate:TemplateRef<IDisplayEvent>;\n    @Input() weekviewAllDayEventSectionTemplate:TemplateRef<IWeekViewAllDayEventSectionTemplateContext>;\n    @Input() weekviewNormalEventSectionTemplate:TemplateRef<IWeekViewNormalEventSectionTemplateContext>;\n    @Input() dayviewAllDayEventSectionTemplate:TemplateRef<IDayViewAllDayEventSectionTemplateContext>;\n    @Input() dayviewNormalEventSectionTemplate:TemplateRef<IDayViewNormalEventSectionTemplateContext>;\n    @Input() dateFormatter:IDateFormatter;\n    @Input() dir:string = \"\";\n    @Input() scrollToHour:number = 0;\n    @Input() preserveScrollPosition:boolean = false;\n    @Input() lockSwipeToPrev:boolean = false;\n    @Input() lockSwipes:boolean = false;\n    @Input() locale:string = \"\";\n    @Input() startHour:number = 0;\n    @Input() endHour:number = 24;\n    @Input() spaceBetween:number = 0;\n\n    @Output() onCurrentDateChanged = new EventEmitter<Date>();\n    @Output() onRangeChanged = new EventEmitter<IRange>();\n    @Output() onEventSelected = new EventEmitter<IEvent>();\n    @Output() onTimeSelected = new EventEmitter<ITimeSelected>();\n    @Output() onTitleChanged = new EventEmitter<string>();\n\n    private _currentDate:Date;\n    private hourParts = 1;\n    private hourSegments = 1;\n    private currentDateChangedFromChildrenSubscription:Subscription;\n\n    constructor(private calendarService:CalendarService, @Inject(LOCALE_ID) private appLocale:string) {\n        this.locale = appLocale;\n    }\n\n    ngOnInit() {\n        if (this.autoSelect) {\n            if (this.autoSelect.toString() === 'false') {\n                this.autoSelect = false;\n            } else {\n                this.autoSelect = true;\n            }\n        }\n        this.hourSegments = 60 / this.timeInterval;\n        this.hourParts = 60 / this.step;\n        if(this.hourParts <= this.hourSegments) {\n            this.hourParts = 1;\n        } else {\n            this.hourParts = this.hourParts / this.hourSegments;\n        }\n        this.startHour = parseInt(this.startHour.toString());\n        this.endHour = parseInt(this.endHour.toString());\n        this.calendarService.queryMode = this.queryMode;\n\n        this.currentDateChangedFromChildrenSubscription = this.calendarService.currentDateChangedFromChildren$.subscribe(currentDate => {\n            this._currentDate = currentDate;\n            this.onCurrentDateChanged.emit(currentDate);\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.currentDateChangedFromChildrenSubscription) {\n            this.currentDateChangedFromChildrenSubscription.unsubscribe();\n            this.currentDateChangedFromChildrenSubscription = null;\n        }\n    }\n\n    rangeChanged(range:IRange) {\n        this.onRangeChanged.emit(range);\n    }\n\n    eventSelected(event:IEvent) {\n        this.onEventSelected.emit(event);\n    }\n\n    timeSelected(timeSelected:ITimeSelected) {\n        this.onTimeSelected.emit(timeSelected);\n    }\n\n    titleChanged(title:string) {\n        this.onTitleChanged.emit(title);\n    }\n\n    loadEvents() {\n        this.calendarService.loadEvents();\n    }\n}\n"]}